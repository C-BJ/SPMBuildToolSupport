import Foundation
import PackagePlugin

@main
struct SwiftCommandDemoPlugin: SPMBuildToolPlugin {

  func buildCommands(
    context: PackagePlugin.PluginContext, target: PackagePlugin.Target
  ) throws -> [SPMBuildCommand] {

    // The files of the resulting target ending with ".swift-in"
    let sources = (target as! SourceModuleTarget).sourceFiles(withSuffix: ".swift.in").map(\.path)
    if sources.isEmpty { return [] }

    // The swift script to run.
    let scriptFile = URL(fileURLWithPath: #filePath)
      .deletingLastPathComponent().deletingLastPathComponent().deletingLastPathComponent()
      .appendingPathComponent("Scripts").appendingPathComponent("GenerateSourceFiles.swift")

    // The name of the executable binary the script will be compiled into.
    let scriptExecutableFileName
      = scriptFile.deletingPathExtension().lastPathComponent + executableSuffix

    let outputDirectory = context.pluginWorkDirectory.url

    // The full path to the executable binary.
    let scriptExecutable
      = outputDirectory.appendingPathComponent(scriptExecutableFileName).spmPath

    // The files to be generated by the script.
    let generatedSwiftFiles = sources.map {
      let swiftFileName = $0.url.deletingPathExtension().lastPathComponent
      return outputDirectory.appendingPathComponent(swiftFileName)
    }

    return try [
      .buildCommand(
        displayName: "Compiling script \(scriptFile.spmPath.lastComponent)",
        executable: .preInstalled(file: context.swiftTool("swiftc")),
        arguments: [ scriptFile.platformString, "-o", scriptExecutable.platformString ],
        inputFiles: [scriptFile.spmPath],
        outputFiles: [scriptExecutable]
      ),

      .buildCommand(
        displayName: "Running \(scriptExecutable.lastComponent)",
        executable: .preInstalled(file: scriptExecutable),
        arguments: [ "-o", outputDirectory.platformString ] + sources.map(\.platformString),
        inputFiles: sources + [scriptExecutable],
        outputFiles: generatedSwiftFiles.map(\.spmPath))
    ]
  }

}

