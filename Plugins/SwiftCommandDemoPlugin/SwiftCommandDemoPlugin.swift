import Foundation
import PackagePlugin

@main
struct SwiftCommandDemoPlugin: SPMBuildToolPlugin {

  func buildCommands(
    context: PackagePlugin.PluginContext, target: PackagePlugin.Target
  ) throws -> [SPMBuildCommand] {

    // The files of the resulting target ending with ".swift-in"
    let sources = (target as! SourceModuleTarget).sourceFiles(withSuffix: ".swift.in").map(\.path)
    if sources.isEmpty { return [] }

    // The swift script to run.
    let scriptFile = URL(fileURLWithPath: #filePath)
      .deletingLastPathComponent().deletingLastPathComponent().deletingLastPathComponent()
      .appendingPathComponent("Scripts").appendingPathComponent("GenerateSourceFiles.swift")
      .spmPath

    let outputDirectory = context.pluginWorkDirectory

    // The files to be generated by the script.
    let generatedSwiftFiles = sources.map {
      let swiftFileName = $0.url.deletingPathExtension().lastPathComponent
      return outputDirectory.appending(subpath: swiftFileName)
    }

    return [
      .buildCommand(
        displayName: "Running script \(scriptFile.lastComponent)",
        executable: .swift,
        arguments: [
          "-module-cache-path",
          context.pluginWorkDirectory.appending("clang-module-cache").platformString,
          scriptFile.platformString, "-o", outputDirectory.platformString ]
          + sources.map(\.platformString),
        inputFiles: sources + [scriptFile],
        outputFiles: generatedSwiftFiles)
    ]
  }

}

